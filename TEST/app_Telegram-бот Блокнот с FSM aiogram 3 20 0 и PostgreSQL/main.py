import logging
import asyncpg
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class NoteStates(StatesGroup):
    waiting_for_note_text = State()
    waiting_for_note_delete = State()


# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PostgreSQL
class Database:
    def __init__(self):
        self.pool = None

    async def create_pool(self):
        self.pool = await asyncpg.create_pool(
            user=os.getenv("DB_USER"),
            password=os.getenv("DB_PASSWORD"),
            database=os.getenv("DB_NAME"),
            host=os.getenv("DB_HOST"),
            port=os.getenv("DB_PORT"),
            min_size=1,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            max_size=10,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            command_timeout=60,  # –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (—Å–µ–∫)
            timeout=10  # –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        )
        await self._create_tables()

    async def execute(self, query, *args):
        async with self.pool.acquire() as conn:
            try:
                return await conn.execute(query, *args)
            except asyncpg.exceptions.ConnectionDoesNotExistError:
                await self.connect()  # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                return await conn.execute(query, *args)

    async def _create_tables(self):
        async with self.pool.acquire() as conn:
            try:
                await conn.execute("""
                    CREATE TABLE IF NOT EXISTS users (
                        user_id BIGINT PRIMARY KEY,
                        username TEXT
                    )
                """)
            except asyncpg.exceptions.ConnectionDoesNotExistError:
                # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                await asyncio.sleep(1)
                await conn.execute("""
                    CREATE TABLE IF NOT EXISTS notes (
                        note_id SERIAL PRIMARY KEY,
                        user_id BIGINT REFERENCES users(user_id),
                        text TEXT NOT NULL,
                        created_at TIMESTAMP DEFAULT NOW()
                    )
                """)

    async def add_user(self, user_id: int, username: str):
        async with self.pool.acquire() as conn:
            await conn.execute("""
                INSERT INTO users (user_id, username)
                VALUES ($1, $2)
                ON CONFLICT (user_id) DO NOTHING
            """, user_id, username)

    async def add_note(self, user_id: int, text: str):
        async with self.pool.acquire() as conn:
            return await conn.fetchval("""
                INSERT INTO notes (user_id, text)
                VALUES ($1, $2)
                RETURNING note_id
            """, user_id, text)

    async def get_notes(self, user_id: int):
        async with self.pool.acquire() as conn:
            return await conn.fetch("""
                SELECT note_id, text 
                FROM notes 
                WHERE user_id = $1
                ORDER BY created_at DESC
            """, user_id)

    async def delete_note(self, user_id: int, note_id: int):
        async with self.pool.acquire() as conn:
            return await conn.execute("""
                DELETE FROM notes
                WHERE user_id = $1 AND note_id = $2
            """, user_id, note_id)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(
        KeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"),
        KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏"),
        KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"),
    )
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "unknown"

    await db.add_user(user_id, username)
    await message.answer(
        "üìî –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –ª–∏—á–Ω—ã–π –±–ª–æ–∫–Ω–æ—Ç!\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –∑–∞–º–µ—Ç–∫–∏.",
        reply_markup=get_main_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"
@dp.message(F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
async def add_note_start(message: types.Message, state: FSMContext):
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:")
    await state.set_state(NoteStates.waiting_for_note_text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –∑–∞–º–µ—Ç–∫–∏ (–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞)
@dp.message(NoteStates.waiting_for_note_text)
async def save_note(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    note_text = message.text

    note_id = await db.add_note(user_id, note_text)
    notes = await db.get_notes(user_id)

    await message.answer(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ #{note_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n–í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫: {len(notes)}")
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏"
@dp.message(F.text == "üìã –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏")
async def show_notes(message: types.Message):
    user_id = message.from_user.id
    notes = await db.get_notes(user_id)

    if not notes:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
        return

    response = "üìã –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n\n"
    for note in notes:
        response += f"#{note['note_id']}: {note['text']}\n\n"

    await message.answer(response)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"
@dp.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
async def delete_note_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    notes = await db.get_notes(user_id)

    if not notes:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
                     [KeyboardButton(text=f"‚ùå –£–¥–∞–ª–∏—Ç—å #{note['note_id']}")] for note in notes
                 ] + [[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state(NoteStates.waiting_for_note_delete)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏
@dp.message(NoteStates.waiting_for_note_delete, F.text.startswith("‚ùå –£–¥–∞–ª–∏—Ç—å #"))
async def delete_note(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    try:
        note_id = int(message.text.split("#")[1])
        deleted = await db.delete_note(user_id, note_id)

        if deleted == "DELETE 1":
            await message.answer(
                f"üóë –ó–∞–º–µ—Ç–∫–∞ #{note_id} —É–¥–∞–ª–µ–Ω–∞!",
                reply_markup=get_main_keyboard()
            )
        else:
            await message.answer(
                "–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.",
                reply_markup=get_main_keyboard()
            )
    except (IndexError, ValueError):
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞.",
            reply_markup=get_main_keyboard()
        )

    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" (–≤—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π)
@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await db.create_pool()
    await dp.start_polling(bot)


if __name__ == '__main__':
    import asyncio
    # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(level=logging.INFO)
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('Exit')