# Настройки Telegram бота
BOT_TOKEN='7809395283:AAFfw7d5T1KQLnbTmazSnLRRF2AP2HJKFpY'

# Настройки PostgreSQL
DB_NAME=IT_Pro            # Название базы данных
DB_USER=postgres          # Имя пользователя БД
DB_PASSWORD=12345qwert    # Пароль пользователя БД
DB_HOST=localhost         # Хост, где работает PostgreSQL
DB_PORT=5432              # Порт PostgreSQL



; Подробное объяснение каждой переменной:
; BOT_TOKEN:
;
; Это уникальный идентификатор вашего Telegram бота
;
; Как получить:
;
; Напишите @BotFather в Telegram
;
; Используйте команду /newbot
;
; Следуйте инструкциям (укажите имя и username бота)
;
; Получите токен вида 1234567890:ABCdefGHIJKlmNoPQRsTUVwxyZ-1234567890
;
; Пример: BOT_TOKEN=5987623410:AAEeZz12345ffgghhii_jjkkllmmnnooppqq
;
; DB_NAME:
;
; Название базы данных, которую вы создали в PostgreSQL
;
; По умолчанию: notes_bot
;
; Можно изменить на любое другое название
;
; Пример: DB_NAME=telegram_notes_prod
;
; DB_USER:
;
; Имя пользователя для подключения к PostgreSQL
;
; По умолчанию часто используется postgres
;
; Рекомендуется создать отдельного пользователя для бота
;
; Пример: DB_USER=notes_bot_user
;
; DB_PASSWORD:
;
; Пароль для пользователя базы данных
;
; Должен быть сложным (рекомендуется 12+ символов)
;
; Пример: DB_PASSWORD=7*G2$kL9!pQx@zYb
;
; DB_HOST:
;
; Адрес сервера PostgreSQL
;
; Для локальной разработки: localhost или 127.0.0.1
;
; Для удаленного сервера: IP-адрес или доменное имя
;
; Пример для удаленного сервера: DB_HOST=db.example.com
;
; DB_PORT:
;
; Порт, на котором работает PostgreSQL
;
; По умолчанию: 5432
;
; Измените, если используете нестандартный порт
;
; Пример: DB_PORT=5433
;
; Дополнительные рекомендации:
; Безопасность:
;
; Никогда не коммитьте .env в Git! Добавьте его в .gitignore
;
; Используйте разные пароли для разработки и продакшена
;
; Для продакшена ограничьте права пользователя БД:
;
; sql
; GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE notes TO notes_bot_user;
; GRANT SELECT, INSERT ON TABLE users TO notes_bot_user;
; Пример для Docker:
; Если используете Docker, настройки могут выглядеть так:
;
; DB_HOST=postgres  # имя сервиса в docker-compose.yml
; DB_PORT=5432
; Проверка настроек:
; Чтобы проверить подключение к БД, можно использовать этот Python код:
;
; python
; import asyncpg
; import os
; from dotenv import load_dotenv
;
; load_dotenv()
;
; async def test_connection():
;     conn = await asyncpg.connect(
;         user=os.getenv("DB_USER"),
;         password=os.getenv("DB_PASSWORD"),
;         database=os.getenv("DB_NAME"),
;         host=os.getenv("DB_HOST"),
;         port=os.getenv("DB_PORT")
;     )
;     print("Успешное подключение к PostgreSQL!")
;     await conn.close()
;
; import asyncio
; asyncio.run(test_connection())
; Резервные значения:
; В коде можно указать значения по умолчанию на случай отсутствия .env:
;
; python
; BOT_TOKEN = os.getenv("BOT_TOKEN", "default_token_if_not_set")
; Формат файла:
;
; Каждая строка содержит одну переменную в формате KEY=VALUE
;
; Пустые строки игнорируются
;
; Строки, начинающиеся с # - комментарии
;
; Не используйте пробелы вокруг =
;
; Значения обычно не требуют кавычек