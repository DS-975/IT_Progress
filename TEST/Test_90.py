import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

from config import TOKEN

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö" –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ SQLite/PostgreSQL –∏ —Ç.–¥.)
notes_db = {}


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(
        KeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"),
        KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏"),
        KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"),
    )
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    notes_db[user_id] = notes_db.get(user_id, [])

    await message.answer(
        "üìî –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –ª–∏—á–Ω—ã–π –±–ª–æ–∫–Ω–æ—Ç!\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –∑–∞–º–µ—Ç–∫–∏.",
        reply_markup=get_main_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"
@dp.message(F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
async def add_note_start(message: types.Message):
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ FSM)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –∑–∞–º–µ—Ç–∫–∏
@dp.message(F.text & ~F.text.startswith(('üìù', 'üìã', '‚ùå')))
async def save_note(message: types.Message):
    user_id = message.from_user.id
    note_text = message.text

    if user_id not in notes_db:
        notes_db[user_id] = []

    notes_db[user_id].append(note_text)
    await message.answer(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n–í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫: {len(notes_db[user_id])}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏"
@dp.message(F.text == "üìã –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏")
async def show_notes(message: types.Message):
    user_id = message.from_user.id
    notes = notes_db.get(user_id, [])

    if not notes:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
        return

    response = "üìã –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n\n"
    for i, note in enumerate(notes, 1):
        response += f"{i}. {note}\n\n"

    await message.answer(response)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"
@dp.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
async def delete_note_start(message: types.Message):
    user_id = message.from_user.id
    notes = notes_db.get(user_id, [])

    if not notes:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
                     [KeyboardButton(text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {i + 1}")] for i in range(len(notes))
                 ] + [[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏
@dp.message(F.text.startswith("‚ùå –£–¥–∞–ª–∏—Ç—å "))
async def delete_note(message: types.Message):
    user_id = message.from_user.id
    notes = notes_db.get(user_id, [])

    try:
        note_num = int(message.text.split()[2]) - 1
        if 0 <= note_num < len(notes):
            deleted_note = notes.pop(note_num)
            await message.answer(
                f"üóë –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞:\n\n{deleted_note}",
                reply_markup=get_main_keyboard()
            )
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏.", reply_markup=get_main_keyboard())
    except (IndexError, ValueError):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=get_main_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())